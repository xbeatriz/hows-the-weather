openapi: 3.0.3
info:
  title: API de Utilizadores, Sensores e Comunidades
  version: 1.0.0
  description: API para registo/login de utilizadores, gestão de sensores e comunidades.
servers:
  - url: http://localhost:3000/api/

paths:
  /user/register:
    post:
      summary: Registar novo utilizador
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUser"
      responses:
        "201":
          description: Conta criada com sucesso, email de verificação enviado
        "400":
          description: Email já em uso

  /user/login:
    post:
      summary: Login de utilizador
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
      responses:
        "200":
          description: Login efetuado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "401":
          description: Credenciais inválidas ou email não verificado

  /user/verify-email/{token}:
    get:
      summary: Verificar email via token
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Email verificado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "400":
          description: Token inválido ou expirado
        "404":
          description: Utilizador não encontrado

  /user/refresh-token:
    post:
      summary: Gerar novo access token com refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        "200":
          description: Token renovado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "400":
          description: Refresh token não fornecido
        "401":
          description: Refresh token inválido ou expirado

  /user/me:
    get:
      summary: Obter dados do utilizador autenticado
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Dados do utilizador autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    patch:
      summary: Atualizar dados do utilizador autenticado
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: Utilizador atualizado com sucesso
    delete:
      summary: Eliminar conta do utilizador autenticado
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Conta eliminada com sucesso

  /user:
    get:
      summary: Obter todos os utilizadores (admin)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de utilizadores
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  results:
                    type: integer
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"

  /user/{id}:
    get:
      summary: Obter um utilizador por ID (admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Utilizador encontrado
    patch:
      summary: Atualizar utilizador por ID (admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: Utilizador atualizado
    delete:
      summary: Apagar utilizador por ID (admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Utilizador apagado

  /sensors:
    post:
      summary: Criar novo sensor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas.CreateSensor"
      responses:
        "201":
          description: Sensor criado
    get:
      summary: Obter todos os sensores
      responses:
        "200":
          description: Lista de sensores

  /sensors/{id}:
    get:
      summary: Obter sensor por ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dados do sensor
    patch:
      summary: Atualizar sensor por ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas.UpdateSensor"
      responses:
        "200":
          description: Sensor atualizado
    delete:
      summary: Eliminar sensor por ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Sensor apagado

  /communities:
    post:
      summary: Criar nova comunidade
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas.CreateCommunity"
      responses:
        "201":
          description: Comunidade criada
    get:
      summary: Obter todas as comunidades
      responses:
        "200":
          description: Lista de comunidades

  /communities/{id}:
    get:
      summary: Obter comunidade por ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Detalhes da comunidade
    patch:
      summary: Atualizar comunidade por ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas.UpdateCommunity"
      responses:
        "200":
          description: Comunidade atualizada
    delete:
      summary: Eliminar comunidade por ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Comunidade apagada

  /communities/{id}/posts:
    get:
      summary: Listar posts aprovados de uma comunidade
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Lista de posts aprovados
    post:
      summary: Submeter post para aprovação
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas.SubmitPost"
      responses:
        "201":
          description: Post submetido

  /communities/{community_id}/posts/{post_id}/approve:
    patch:
      summary: Aprovar post (apenas admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: community_id
          required: true
          schema:
            type: string
        - in: path
          name: post_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Post aprovado

  /communities/{id}/posts/{post_id}:
    delete:
      summary: Eliminar post (utilizador ou admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: post_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Post eliminado

components:
  schemas:
    RegisterUser:
      type: object
      required: [name, email, password]
      properties:
        name: { type: string }
        email: { type: string, format: email }
        password: { type: string, format: password }
    LoginUser:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
    User:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        email: { type: string }
        isVerified: { type: boolean }
        role: { type: string }
        configs:
          type: array
          items:
            $ref: "#/components/schemas.UserConfig"
    UserUpdate:
      type: object
      properties:
        name: { type: string }
        email: { type: string, format: email }
    UserConfig:
      type: object
      properties:
        location: { type: string }
        notification_type:
          type: string
          enum: ["email", "app"]
        alert_thresholds:
          type: object
          properties:
            temperature:
              type: object
              properties:
                min: { type: number }
                max: { type: number }
            humidity:
              type: object
              properties:
                min: { type: number }
                max: { type: number }
            gas:
              type: object
              properties:
                min: { type: number }
                max: { type: number }
    CreateSensor:
      type: object
      required: [type, location, status, update_frequency]
      properties:
        type: { type: string }
        location: { type: string }
        status: { type: string }
        update_frequency: { type: integer }
    UpdateSensor:
      type: object
      properties:
        type: { type: string }
        location: { type: string }
        status: { type: string }
        update_frequency: { type: integer }
        last_reading:
          type: object
          description: Última leitura do sensor
        readings:
          type: array
          items:
            type: object
    CreateCommunity:
      type: object
      required: [location]
      properties:
        location: { type: string }
        members_count: { type: integer }
    UpdateCommunity:
      type: object
      properties:
        location: { type: string }
        members_count: { type: integer }
        community_posts:
          type: array
          items: { type: object }
    SubmitPost:
      type: object
      required: [post_id, user_id, description, timestamp]
      properties:
        post_id: { type: string }
        user_id: { type: string }
        sensor_id: { type: string }
        description: { type: string }
        media:
          type: array
          items: { type: string }
        timestamp: { type: string, format: date-time }
        tags:
          type: array
          items: { type: string }

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
